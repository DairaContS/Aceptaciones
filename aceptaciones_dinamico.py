# -*- coding: utf-8 -*-
"""ACEPTACIONES DINAMICO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RqqVX71i1JCfMzzSEUeR99LDgbCZWxeb
"""

import pandas as pd
import openpyxl
from google.colab import files
import os

def eliminar_filas_y_guardar(archivo_entrada, archivo_salida, filas_a_eliminar):
    wb = openpyxl.load_workbook(archivo_entrada)
    hoja = wb.active
    hoja.delete_rows(1, filas_a_eliminar)
    wb.save(archivo_salida)

# Subir archivos manualmente
uploaded = files.upload()

# Identificar archivos según su contenido
archivos = {nombre.lower(): nombre for nombre in uploaded.keys()}

# Asignar nombres dinámicos a los archivos esperados
archivo_oc = next((archivos[n] for n in archivos if "orden" in n or "oc" in n), None)
archivo_card = next((archivos[n] for n in archivos if "card" in n), None)
archivo_sfp = next((archivos[n] for n in archivos if "sfp" in n), None)
archivo_entradas = next((archivos[n] for n in archivos if "entrada" in n), None)

if archivo_oc:
    eliminar_filas_y_guardar(archivo_oc, "OC.xlsx", 6)
if archivo_card:
    eliminar_filas_y_guardar(archivo_card, "CARD_modificado.xlsx", 3)
if archivo_sfp:
    eliminar_filas_y_guardar(archivo_sfp, "SFP_modificado.xlsx", 7)

# Cargar archivos y procesar datos
sfp_df = pd.read_excel("SFP_modificado.xlsx") if archivo_sfp else None
card_df = pd.read_excel("CARD_modificado.xlsx") if archivo_card else None
df_entry = pd.read_excel(archivo_entradas) if archivo_entradas else None

def procesar_port(port):
    partes = port.split('-')
    sitio = partes[0].strip()
    subrack = "".join(filter(str.isdigit, partes[1])) if len(partes) >= 2 else ""
    slot_id = partes[2].split('_')[0].strip() if len(partes) >= 3 else ""
    return sitio, subrack, slot_id

if sfp_df is not None:
    sfp_df[['Sitio', 'Subrack', 'Slot ID']] = sfp_df['Port'].apply(lambda x: pd.Series(procesar_port(x)))
    resultado_df = sfp_df[['Sitio', 'Subrack', 'Slot ID', 'SN(Bar Code)']].rename(columns={'SN(Bar Code)': 'Modelo'})
    resultado_df.to_excel("resultado_sfp.xlsx", index=False)

if card_df is not None:
    card_df.rename(columns={'NE Name': 'Sitio'}, inplace=True)
    nuevo_df = card_df[['Sitio', 'Subrack ID', 'Slot ID', 'SN(Bar Code)']].rename(columns={'Subrack ID': 'Subrack', 'SN(Bar Code)': 'Modelo'})
    nuevo_df.to_excel("resultado_card.xlsx", index=False)

if df_entry is not None:
    df_entry.rename(columns={'No de serie': 'Modelo'}, inplace=True)
    df_entry.to_excel("_entradas.xlsx", index=False)


# Convertir columnas a numéricas
df_sfp = pd.read_excel("resultado_sfp.xlsx")
df_card = pd.read_excel("resultado_card.xlsx")
df_oc = pd.read_excel("OC.xlsx")

df_sfp['Subrack'] = pd.to_numeric(df_sfp['Subrack'], errors='coerce')
df_sfp['Slot ID'] = pd.to_numeric(df_sfp['Slot ID'], errors='coerce')
df_card['Subrack'] = pd.to_numeric(df_card['Subrack'], errors='coerce')
df_card['Slot ID'] = pd.to_numeric(df_card['Slot ID'], errors='coerce')
df_oc['Subrack'] = pd.to_numeric(df_oc['Subrack'], errors='coerce')
df_oc['Slot ID'] = pd.to_numeric(df_oc['Slot ID'], errors='coerce')
df_oc['Modelo'] = df_oc['Modelo'].astype(str)

df_sfp.to_excel("sfp_numerico.xlsx", index=False)
df_card.to_excel("card_numerico.xlsx", index=False)
df_oc.to_excel("oc_numerico.xlsx", index=False)

# Formatear columna K como texto
archivo_excel = '_entradas.xlsx'
wb = openpyxl.load_workbook(archivo_excel)
ws = wb.active
columna_k = 'K'
for cell in ws[columna_k]:
    cell.number_format = '@'
    if isinstance(cell.value, (int, float)):
        cell.value = str(cell.value)
wb.save('reporte_entradas.xlsx')

# Validación
df_oc = pd.read_excel("oc_numerico.xlsx")
df_sfp = pd.read_excel("sfp_numerico.xlsx")
df_card = pd.read_excel("card_numerico.xlsx")

df_oc_filtrado = df_oc[(df_oc['Sitio'] != 'ALMACEN GTAC') & (df_oc['Sitio'].notna())]

for index, row in df_oc_filtrado.iterrows():
    modelo_oc, subrack_oc, slot_id_oc = row['Modelo'], row['Subrack'], row['Slot ID']
    encontrado = False

    for df_check in [df_sfp, df_card]:
        if modelo_oc in df_check['Modelo'].values:
            df_filtrado = df_check[df_check['Modelo'] == modelo_oc]
            if any((df_filtrado['Subrack'] == subrack_oc) & (df_filtrado['Slot ID'] == slot_id_oc)):
                df_oc.at[index, 'Validacion'] = 'coincide'
                encontrado = True
                break

    if not encontrado:
        df_oc.at[index, 'Validacion'] = 'coincide' if index > 0 and df_oc.at[index - 1, 'Descripción'] in [
            'Assembly SubRack (OSN 9800 M24)', 'A63B Type ETSI Rack (2200*600*300mm,LSZH) Without SubRack (2*M24)'] else 'no coincide'

df_oc.to_excel("OrdenC.xlsx", index=False)

# Comparación final
df_oc = pd.read_excel("OrdenC.xlsx")
reporte_entradas = pd.read_excel("reporte_entradas.xlsx")

def comparar_documentos(fila, sfp, card):
    documentos = []
    if fila['Modelo'] in sfp['Modelo'].values:
        documentos.append("Modelo en sfp")
    if fila['Modelo'] in card['Modelo'].values:
        documentos.append("Modelo en card")
    return " ".join(documentos)

df_oc['Documento'] = df_oc.apply(lambda fila: comparar_documentos(fila, df_sfp, df_card), axis=1)

def verificar_reporte_entradas(fila, reporte_entradas):
    if fila['Sitio'] == "ALMACEN GTAC":
        return fila['Documento'] + " Modelo en reporte_entradas" if fila['Modelo'] in reporte_entradas['Modelo'].values else fila['Documento'] + " Modelo no encontrado en reporte_entradas"
    return fila['Documento']

df_oc['Documento'] = df_oc.apply(lambda fila: verificar_reporte_entradas(fila, reporte_entradas), axis=1)

df_oc.to_excel("OrdenValidada.xlsx", index=False)

# Agregar Centro de Costos
df_oc = pd.read_excel("OrdenValidada.xlsx")
df_ccostos = pd.read_excel("ccostos.xlsx")

for index, row in df_oc.iterrows():
    if row['Sitio'] not in ["", "ALMACEN GTAC"]:
        ccosto = df_ccostos.loc[df_ccostos['Sitio'] == row['Sitio'], 'Centro de Costos']
        if not ccosto.empty:
            df_oc.at[index, 'Centro de Costos'] = ccosto.values[0]

df_oc.to_excel("OrdenValidadaCcostos.xlsx", index=False)

# Descargar automáticamente el archivo final
files.download("OrdenValidadaCcostos.xlsx")

# Resto del código de validación y comparación
# Asegurar que los archivos requeridos existen antes de procesarlos